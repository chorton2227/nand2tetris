// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field Array _chars;
    field int _maxLength;
    field int _length;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        if (maxLength < 1) {
            let maxLength = 1;
        }

        let _chars = Array.new(maxLength);
        let _maxLength = maxLength;
        let _length = 0;
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do Memory.deAlloc(_chars);
        do Memory.deAlloc(this);
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return _length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return _chars[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let _chars[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if (_length < _maxLength) {
            let _chars[_length] = c;
            let _length = _length + 1;
        }
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if (_length > 0) {
            let _length = _length - 1;
        }
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int i, d, v;
        var boolean neg;

        let v = 0;

        if (_chars[0] = 45) {
            let i = 1;
            let neg = true;
        }
        else {
            let i = 0;
            let neg = false;
        }

        while (i < _length) {
            let d = String.char2Int(_chars[i]);
            let v = v * 10 + d;
            let i = i + 1;
        }

        if (neg) {
            let v = -v;
        }

        return v;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        let _length = 0;

        // Handle negative values
        if (val < 0) {
            let val = -val;
            do appendChar(45);
        }

        do _setInt(val);
        return;
    }

    /** Returns an integer as a string. */
    method void _setInt(int n) {
        var int x, lastDigit;
        var char c;

        let x = n / 10;
        let lastDigit = n - (x * 10);
        let c = String.int2Char(lastDigit);

        if (n > 9) {
            do _setInt(x);
        }

        do appendChar(c);
        return;
    }

    /** Returns int for a given ascii char. */
    function int char2Int(char c) {
        return c - 48;
    }

    /** Returns ascii for a given number. */
    function char int2Char(int n) {
        return n + 48;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
